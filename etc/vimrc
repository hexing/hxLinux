"ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -f tag-5 E:\develop\Core_Libs

runtime! archlinux.vim

"settings {{{1
	"default settings:
		"set selectmode= textwidth=0 showbreak=
		"set noundofile noinfercase nolist norelativenumber noshiftround noshowmatch nosmarttab
		"set joinspaces ttyfast tagbsearch wrapscan
	"filetype settings:cindent cinkeys showfulltag
	"unsure settings:dictionary include includeexpr updatecount updatetime viewdir maxmem maxmempattern maxmemtot menuitems mkspellmen

	syntax enable
	syntax on
	filetype on

	set number more
	set wrap whichwrap=b,s "只有<BS><SPACE>可以在行间回绕
	set smartindent autoindent copyindent
	"set magic cursorline hidden lazyredraw splitright confirm
	set nofsync nospell nocompatible noruler noshowcmd noshowmode swapsync=sync
	set noincsearch hlsearch ignorecase
	"set noautoread noerrorbells novisualbell t_vb=
	set shortmess=aoOtTI "启动的时候不显示那个援助索马里儿童的提示
	set viminfo= "退出时不保存信息
	set switchbuf=usetab,newtab
	set backspace=indent,eol,start
	set isfname+=32 "让gf也能查找包含space的文件名
	set completeopt=menuone selection=inclusive
	set history=9 undolevels=36 maxfuncdepth=97
	set wildmenu "wildmode=full wildchar=<Tab>
	set diffopt+=vertical matchpairs+=<:> helplang=cn formatoptions+=mM
	"set fileencoding=utf-8
	set fileencodings=usc-bom,utf-8,chinese ",euc-jp,gb18030,gbk,gb2312,cp936
	set ambiwidth=double
	"set encoding=utf-8
	"let &termencoding=&encoding
	set nobackup nowritebackup updatecount=0 backupdir=	"关闭备份功能
	set noswapfile	"可在编辑过程中禁止使用交换文件
	set scrolloff=1	sidescroll=3 sidescrolloff=7
	set shiftwidth=4 tabstop=4 softtabstop=4 noexpandtab
	set nobomb	"设置字节顺序 只有写入的时候才会有效，现在设置是无效的

	"set cmdheight=2 matchtime=7 mouse=a
	"let mapleader="," maplocalleader="\"

	" 用空格键来开关折叠
	"set foldenable
	"nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
	"set foldmethod=syntax "设置语法折叠
	"set foldcolumn=3 "设置折叠区域的宽度
	"set foldclose=all foldopen=all "设置为自动关闭/打开折叠
	set foldenable foldmethod=marker "foldnestmax=7

	"if has('multi_byte')
	"	set nodelcombine
	"endif
	"if has('windows')
	"	set showtabline=1
	"endif

	if v:version>=703
		set cryptmethod=blowfish
		set concealcursor=nc conceallevel=1
	endif

	if has('win32')
		if executable('mingw32-make.exe')
			set makeprg=mingw32-make.exe
		endif
		set	directory=b:/temp/ "将所有.swp发入指定目录
		set fileformat=dos
	else
		set	directory=/tmp/ "将所有.swp发入指定目录
		set fileformat=unix
		set noshelltemp 
	endif

	if !has('gui_running')
		set t_Co=256
		if &term == 'linux'
			"控制台光标设置为块状
			set  t_ve+=[?6c
			"autocmd! InsertEnter * set  t_ve-=[?6c
			"autocmd! InsertLeave * set  t_ve+=[?6c
			"autocmd! VimLeave * set  t_ve-=[?6c
		endif
		if &term =~ 'xterm'
			"	set term=ansi "避免nnoremap <Esc> 的bug
			"恢复xterm的屏幕
			set t_ti=7[r[?47h t_te=[?47l8
			"set t_ti=[?1049h t_te=[?1049l
			"let &t_ti="\<Esc>[?1049h" | let &t_te="\<Esc>[?1049l"
			if has('cursorshape') "改变cursor的颜色
				let &t_SI="\<Esc>]12;burlywood1\x7" | let &t_EI="\<Esc>]12;green3\x7"
			endif
		endif
	endif

	set laststatus=2 highlight+=srb
	let &statusline='%f %m%r    [%{&ft}|%{&fenc}|%{&ff}]   %{g:colors_name}'

	
	"if has('win32')
	"	set tags+=E:/develop/tags/tags_core_libs
	"	set tags+=E:/develop/tags/tags_wxWidgets_include
	"	set tags+=E:/develop/tags/tags_wxWidgets_msw 
	"endif

	"set iskeyword+=.	"把.也认为是word的一个合法字符

	"scriptnames	"列出所有加载的 plugins, _vimrcs
	"verbose set history	"显示history的值并指出设置文件的位置

"plugin settings {{{1
	"taglist.vim {{{2
		let g:Tlist_Exit_OnlyWindow = 1
		let g:Tlist_Show_One_File = 1
		let g:Tlist_Sort_Type = 'name'
		let g:Tlist_File_Fold_Auto_Close = 1
		if has('win32')
			let g:Tlist_Ctags_Cmd = $VIMRUNTIME . '/ctags.exe'
		endif

	"matchparen.vim {{{2
		"let g:loaded_matchparen = 0

	"autoclose.vim {{{2
		let g:autoclose_on = 1

	"hexing_autoload.vim
	if has('win32')
		let g:Ctags = $VIMRUNTIME . '/ctags.exe'
		let g:TagDirectory = 'b:/tags'
		call hexing#hexing_autoload#HX_LoadTagFiles(g:TagDirectory . '/*.tag')
	endif

"autocmd {{{1
		"if has('autochdir')
		"	set autochdir
		"else
		"	autocmd BufEnter * exec "cd %:p:h"
		"endif
		autocmd BufReadPre * call hexing#hexing_autoload#HX_OnOpenFile()
		au BufRead,BufNewFile *.h++	set filetype=cpp
		au BufRead,BufNewFile *.c++	set filetype=cpp

"command {{{1
	command! -range Align : call hexing#hexing_autoload#HX_align_word_column(<line1>, <line2>)

"maps {{{1 
	"normal mode {{{2
		"nnoremap <F1> :call hexing#hexing_autoload#HX_debug_test()<CR>
		"nnoremap <silent> <S-Tab> :call hexing#hexing_autoload#HX_switch_showtabline()<CR>
		"nnoremap / :nohlsearch<CR>/
		"nnoremap ? :nohlsearch<CR>?
		"nnoremap <silent> <Esc> :nohlsearch<CR><Esc>
		"nnoremap Y y$
		"nnoremap <Home> ^
		"nnoremap <Home> 1_
		"nnoremap <silent> <kPlus> :set foldlevel-=1<CR>
		"nnoremap <silent> <kMinus> :set foldlevel+=1<CR>
		"nnoremap <C-F4> :call hexing#hexing_autoload#HX_close_buffer()<CR>
		"nnoremap <silent> <F6> :call  hexing#hexing_autoload#HX_toggle_quickfix_wnd()<CR>
		"nnoremap <silent> <C-F12> :call hexing#hexing_autoload#HX_CreateTagFile()<CR>
		"nnoremap <silent> <A-F12> :call hexing#hexing_autoload#HX_LoadTagFiles('')<CR>

	"insert mode {{{2
		"inoremap <CR> <C-R>=pumvisible() ? "\<lt>C-Y>" : "\<lt>CR>"<CR> inoremap <expr> <Esc> pumvisible() ? "\<C-E>" : "\<Esc>"
		"imap <C-CR> <End><CR>
		"inoremap <S-CR> <C-O>O
		"inoremap <Home> <C-O>^
		"inoremap <silent> <C-S> <C-O>:update<CR>

		"inoremap <A-o> <C-X><C-O>
		"inoremap <A-u> <C-X><C-U>
		"inoremap <A-p> <C-X><C-P>
		"inoremap <A-n> <C-X><C-N>
		"inoremap <A-l> <C-X><C-L>
		"inoremap <A-k> <C-X><C-K>
		"inoremap <A-v> <C-X><C-V>

		"inoremap [ <C-R>=hexing#hexing_autoload#HX_pair('[')<CR>
		"inoremap ] <C-R>=hexing#hexing_autoload#HX_pair(']')<CR>
		"inoremap ( <C-R>=hexing#hexing_autoload#HX_pair('(')<CR>
		"inoremap ) <C-R>=hexing#hexing_autoload#HX_pair(')')<CR>
		"inoremap } <C-R>=hexing#hexing_autoload#HX_pair('}')<CR>
		"inoremap ' <C-R>=hexing#hexing_autoload#HX_pair("'")<CR>

	"visual mode {{{2
		"vnoremap <silent> <A-F8> :call hexing#hexing_autoload#HX_align_lines()<CR>

		"vnoremap <silent> [ :call hexing#hexing_autoload#HX_make_paire('[')<CR>
		"vnoremap <silent> ( :call hexing#hexing_autoload#HX_make_paire('(')<CR>
		"vnoremap <silent> { :call hexing#hexing_autoload#HX_make_paire('{')<CR>
		"vnoremap <silent> ' :call hexing#hexing_autoload#HX_make_paire("'")<CR>
		"vnoremap <silent> " :call hexing#hexing_autoload#HX_make_paire('"')<CR>

	"Emacs maps {{{2
		nnoremap <C-x>s :update<CR>
		nnoremap <C-x><C-s> :update<CR>

"addition {{{1
colorscheme	random
if &diff
	call hexing#hexing_autoload#HX_diff_colorscheme()
endif
